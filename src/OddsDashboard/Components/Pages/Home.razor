@page "/"
@using OddsDashboard.Services
@using System.Timers
@using OddsDashboard.Dtos
@using OddsDashboard.Shared.Dtos
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IOddsService OddsService
@inject IConfiguration Config
@implements IDisposable

@if (_odds == null)
{
    <Skeleton />
}
else
{
    <GameSection Title="Live" Odds="_odds.LiveOdds" />
    <GameSection Title="Upcoming" Odds="_odds.UpcomingOdds" />
}

@code
{
    private readonly Timer _timer = new();
    private OddsResultDto? _odds;

    protected override async Task OnInitializedAsync()
    {
        _odds = await OddsService.GetOdds();
        if (!double.TryParse(Config["OddsRefreshInterval"], out var interval))
        {
            interval = 60000;
        }

        _timer.Interval = interval;
        _timer.Elapsed += (_, _) => TimerCallback();
        _timer.Start();
    }

    private void TimerCallback()
    {
        InvokeAsync(async () =>
        {
            _odds = await OddsService.GetOdds();
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _timer.Dispose();
    }
}
