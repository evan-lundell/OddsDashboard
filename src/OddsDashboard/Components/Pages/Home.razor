@page "/"
@using OddsDashboard.Services
@using System.Timers
@using OddsDashboard.Shared.Dtos
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@inject IOddsService OddsService
@inject IConfiguration Config
@implements IDisposable

@if (_odds == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @foreach (var odds in _odds)
    {
        <Game Odds="odds" Time="_time" />
    }
}


@code
{
    private readonly Timer _timer = new();
    private IEnumerable<OddsDto>? _odds;
    private long _time = DateTime.Now.Ticks;

    protected override async Task OnInitializedAsync()
    {
        _odds = await OddsService.GetOdds();
        if (!double.TryParse(Config["OddsRefreshInterval"], out var interval))
        {
            interval = 60000;
        }

        _timer.Interval = interval;
        _timer.Elapsed += (_, _) => TimerCallback();
        _timer.Start();
    }

    private void TimerCallback()
    {
        InvokeAsync(async () =>
        {
            _odds = await OddsService.GetOdds();
            _time = DateTime.Now.Ticks;
            StateHasChanged();
        });
    }

    public void Dispose()
    {
        _timer.Dispose();
    }
}
